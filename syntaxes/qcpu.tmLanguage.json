{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Simple QCPU Syntax",
	"scopeName": "source.redcmd.syntax.qcpu",
	"patterns": [
		{ "include": "#comment"			},
		{ "include": "#label-address"	},
		{ "include": "#aliases" 		},
		{ "include": "#assembly"		},
		{ "include": "#operators" 		},
		{ "include": "#random"			},
		{ "include": "#array"			},
		{ "include": "#ENUM"			},
		{ "include": "#IF"				},
		{ "include": "#ADDRESSABLE"		},
		{ "include": "#DECLARE"			},
		{ "include": "#HEADER"			},
		{ "include": "#PAGE"			},
		{ "include": "#MAKEPAGE"		},
		{ "include": "#OVERFLOWABLE"	},
		{ "include": "#HEADERS"			},
		{ "include": "#operand"			},
		{ "include": "#comma"			},
		{ "include": "#invalid"			}
	],
	"repository": {
		"comment": {
			"match": "(?>//|;).*$",
			"name": "comment"
		},
		"aliases": {
			"match": "\\b(FWD|CLR|NOP|EMPTY|BREAKPOINT|accumulator|acc|zero|zer|forwarded|fwd)\\b",
			"name": "variable.other.constant"
		},
		"assembly": {
			"match": "\\b(?i:PPI|PPL|PPK|CPI|CPL|CPA|NTA|PCM|IMM|PPS|CPS|XCH|RST|AST|INC|DEC|NEG|RSH|ADD|SUB|IOR|AND|XOR|BSL|BPL|BSR|BPR|ENT|MMU|PRF|PRT|JMP|CAL|BRH|MST|MLD|MLI)\\b",
			"name": "keyword"
		},
		"operators": {
			"match": "\\b(add|sub|ior|and|xor|lsh|rsh|mul|div|mod|\\+|\\-|\\||\\&|\\^)\\b",
			"name": "punctuation.definition.tag"
		},
		"label-address": {
			"match": "^\\s*\\.&?([\\w.@]+)(?>(\\()(\\w+)(\\))|(\\(\\)))?:",
			"captures": {
				"0": { "name": "support.function" },
				"1": { "name": "support.function", "patterns": [ { "include": "#macro" } ] },
				"2": { "name": "keyword.operator" },
				"3": { "patterns": [ { "include": "#numeric" }, { "include": "#invalid-illegal" } ] },
				"4": { "name": "keyword.operator" },
				"5": { "name": "invalid" }
			}
		},
		"label-embed": {
			"match": "\\.([\\w.@]+)!?[+-]?",
			"captures": {
				"0": { "name": "support.function" },
				"1": { "name": "support.function", "patterns": [ { "include": "#macro" } ] }
			}
		},
		"operand": {
			"patterns": [
				{ "include": "#ascii-string"	},
				{ "include": "#ascii-letter"	},
				{ "include": "#label-embed"		},
				{ "include": "#conditions"		},
				{ "include": "#register"		},
				{ "include": "#numeric"			},
				{ "include": "#macro"			}
			]
		},
		"ascii-string": {
			"match": "(?<!\\w)(\\$)([\\w ]+\\w)",
			"captures": {
				"1": { "name": "constant.character.escape markup.italic" },
				"2": { "name": "string" }
			}
		},
		"ascii-letter": {
			"match": "(?<!\\w)(\\$)(\\w)?",
			"captures": {
				"1": { "name": "constant.character.escape" },
				"2": { "name": "string" }
			}
		},
		"numeric": {
			"patterns": [
				{ "include": "#hexadecimal"	},
				{ "include": "#binary"		},
				{ "include": "#decimal"		}
			]
		},
		"hexadecimal": {
			"match": "-?\\b0x\\h{,2}",
			"name": "constant.numeric.hexidecmal"
		},
		"binary": {
			"match": "-?\\b0b[01]{,8}",
			"name": "constant.numeric.binary"
		},
		"decimal": {
			"match": "-?\\b(?>25[0-5]|2[0-4]\\d|1?\\d{1,2})",
			"name": "constant.numeric.decimal"
		},
		"random": {
			"match": "(?<!\\w)(%)(random)\\b",
			"captures": {
				"1": { "name": "support.class" },
				"2": { "name": "constant.numeric.random" }
			}
		},
		"array": {
			"match": "%array\\b",
			"captures": {
				"0": { "name": "support.class" },
				"1": { "name": "strong" }
			}
		},
		"conditions": {
			"match": "\\B#!?(?>cout|signed|underflow|zero)\\b",
			"name": "variable.other.constant"
		},
		"OVERFLOWABLE": {
			"match": "@OVERFLOWABLE",
			"name": "keyword.control strong"
		},
		"ADDRESSABLE": {
			"match": "(@ADDRESSABLE)(?>\\s+((?>(?!//)[^\\s;.])+)(\\.(?>(?!//)[^\\s;])+)?)?(.*)",
			"captures": {
				"1": { "name": "keyword.control strong" },
				"2": { "name": "string" },
				"3": { "patterns": [ { "include": "#label-embed" }, { "include": "#invalid" } ] },
				"4": { "name": "invalid" }
			}
		},
		"PAGE": {
			"match": "(@PAGE)(?>\\s+((?>(?!//)[^\\s;])+)(?>\\s+((?>(?!//)[^\\s;])+))?)?(.*)",
			"captures": {
				"1": { "name": "keyword.control strong" },
				"2": { "patterns": [ { "include": "#numeric" }, { "include": "#invalid" } ] },
				"3": { "patterns": [ { "include": "#numeric" }, { "include": "#invalid" } ] },
				"4": { "name": "invalid" }
			}
		},
		"MAKEPAGE": {
			"match": "(@MAKEPAGE)(?>\\s+((?>(?!//)[^\\s;])+)(?>\\s+((?>(?!//)[^\\s;])+)(?>\\s+((?>(?!//)[^\\s;])+))?)?)?(.*)",
			"captures": {
				"1": { "name": "keyword.control strong" },
				"2": { "name": "string" },
				"3": { "patterns": [ { "include": "#numeric" }, { "include": "#invalid" } ] },
				"4": { "patterns": [ { "include": "#numeric" }, { "include": "#invalid" } ] },
				"5": { "name": "invalid" }
			}
		},
		"HEADER": {
			"match": "(@HEADER)(?>\\s+([A-Z0-9]+)((?>(?!//)[^;])+)?)?",
			"captures": {
				"1": { "name": "keyword.control strong" },
				"2": { "name": "string" },
				"3": { "patterns": [ { "include": "#HEADER-arguments" } ] }
			}
		},
		"HEADERS": {
			"match": "((@)[A-Z0-9]+)((?>(?!//)[^;])+)?",
			"captures": {
				"1": { "name": "keyword.control" },
				"2": { "name": "strong" },
				"3": { "patterns": [ { "include": "#HEADER-arguments" } ] }
			}
		},
		"HEADER-arguments": {
			"match": "(?>\\s+((?>(?!//)[^\\s;])+))((?>(?!//)[^;])+)?",
			"captures": {
				"1": { "patterns": [ { "include": "#macro" }, { "include": "#label-embed" }, { "include": "#numeric" }, { "include": "#random" }, { "include": "#assembly" }, { "include": "#string" } ], "name": "string" },
				"2": { "patterns": [ { "include": "#HEADER-arguments" } ] }
			}
		},
		"ENUM": {
			"begin": "(@ENUM)(?>\\s+((?>(?!//)[^\\s;])+))?(.*)",
			"end": "@END",
			"beginCaptures": {
				"1": { "name": "keyword.control strong" },
				"2": { "name": "string" },
				"3": { "name": "invalid" }
			},
			"endCaptures": {
				"0": { "name": "keyword.control strong" }
			},
			"patterns": [
				{ "include": "#comment"	},
				{ "include": "#DECLARE"	},
				{ "include": "#invalid"	}
			]
		},
		"IF": {
			"begin": "(@IF)(?>\\s+((?>(?!//)[^\\s;])+))?(.*)",
			"end": "@END",
			"beginCaptures": {
				"1": { "name": "keyword.control strong" },
				"2": { "name": "keyword.operator" },
				"3": { "name": "invalid" }
			},
			"endCaptures": {
				"0": { "name": "keyword.control strong" }
			},
			"patterns": [
				{ "include": "#DROPTHROUGH" },
				{ "include": "#ELSE" },
				{ "include": "$self" }
			]
		},
		"ELSE": {
			"begin": "(@ELSE)(.*)",
			"end": "(?=@END)",
			"beginCaptures": {
				"1": { "name": "keyword.control strong" },
				"2": { "name": "invalid" }
			},
			"patterns": [
				{ "include": "#DROPTHROUGH" },
				{ "include": "$self" }
			]
		},
		"DROPTHROUGH": {
			"match": "(@DROPTHROUGH)(?>\\s+((?>(?!//)[^\\s;])+)(?>\\s+((?>(?!//)[^\\s;])+)(?>\\s+((?>(?!//)[^\\s;])+))?)?)?(.*)",
			"captures": {
				"1": { "name": "keyword.control strong" },
				"2": { "patterns": [ { "include": "#assembly" }, { "include": "#invalid" } ] },
				"3": { "patterns": [ { "include": "#operand" }, { "include": "#invalid" } ] },
				"4": { "patterns": [ { "include": "#operand" }, { "include": "#invalid" } ] },
				"5": { "name": "invalid" }
			}
		},
		"DECLARE": {
			"match": "(@DECLARE)(?>\\s+((?>(?!//)[^\\s;])+)(?>\\s+((?>(?!//)[^\\s;])+))?)?(.*)",
			"captures": {
				"1": { "name": "keyword.control strong" },
				"2": { "patterns": [ { "include": "#string" } ] },
				"3": { "patterns": [ { "include": "#macro" }, { "include": "#label-embed" }, { "include": "#numeric" }, { "include": "#random" }, { "include": "#assembly" }, { "include": "#string" }, { "include": "#invalid" } ] },
				"4": { "name": "invalid" }
			}
		},
		"macro": {
			"match": "(@)[\\w.*]+",
			"captures": {
				"0": { "name": "keyword.control" },
				"1": { "name": "markup.italic" }
			}
		},
		"register": {
			"match": "\\b(?>CXT|POI|SPI|[A-D]|Zr)\\b",
			"name": "variable"
		},
		"comma": {
			"match": "(?<!,),(?!,)",
			"name": "keyword.operator"
		},
		"string": {
			"match": "[\\w*.-]+",
			"name": "string"
		},
		"invalid-illegal": {
			"match": "\\S",
			"name": "invalid.illegal markup.underline"
		},
		"invalid": {
			"match": "\\S",
			"name": "invalid"
		}
	}
}
